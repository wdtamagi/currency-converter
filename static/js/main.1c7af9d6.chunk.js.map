{"version":3,"sources":["constants/colors.ts","components/ContentWrapper.tsx","apollo/client.ts","constants/routes.ts","components/NavigationItem.tsx","components/NavigationBar.tsx","RootStyles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WHITE","LIGHTNER_BLUE","LIGHT_BLUE","DARK_BLUE","LIGHT_GRAY","DARK_GRAY","SECONDARY_GRAY","DETAIL_GRAY","ContentWrapper","children","props","css","client","ApolloClient","uri","cache","InMemoryCache","headers","authorization","ROUTES","NavigationItem","to","isActive","useLocation","pathname","NavigationBar","RootStyles","styles","CurrencyConverter","lazy","ExchangeRates","App","fallback","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+HAAA,gRAAO,IAAMA,EAAQ,OACRC,EAAgB,UAChBC,EAAa,UACbC,EAAY,UACZC,EAAa,UACbC,EAAY,UACZC,EAAiB,UACjBC,EAAc,W,wGCFdC,G,KAET,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,4BAC9B,OACE,+BACEC,IAAKA,YAAF,oFAICD,GAEHD,M,kGCdMG,EAAS,IAAIC,eAAa,CACrCC,IAAK,0BACLC,MAAO,IAAIC,gBACXC,QAAS,CACPC,cACE,6E,wBCPOC,EACS,sBADTA,EAEK,kB,QCSLC,EAAyC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIZ,EAAe,EAAfA,SACrDa,EAAWC,cAAcC,WAAaH,EAE5C,OACE,YAAC,IAAD,CACEV,IAAKA,YAAF,wUAWCW,EAAQ,8DAGGtB,IAHH,4CAIcG,IAJd,+EAQGF,IARH,8DAYZoB,GAAIA,GAEHZ,IC/BMgB,EAAoB,WAC/B,OACE,mBACEd,IAAKA,YAAF,sMAImBT,MAMtB,YAACM,EAAA,EAAD,CACEG,IAAKA,YAAF,+DAIH,YAAC,EAAD,CAAgBU,GAAIF,GAApB,sBAGA,YAAC,EAAD,CAAgBE,GAAIF,GAApB,6B,OC5BKO,EAAiB,kBAC5B,cAAC,IAAD,CACEC,OAAQhB,YAAF,mkBCIJiB,EAAoBC,gBAAK,kBAAM,uDAC/BC,EAAgBD,gBAAK,kBAAM,iCAwBlBE,MAtBf,WACE,OACE,eAAC,iBAAD,CAAgBnB,OAAQA,EAAxB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,WAAD,CAAUoB,SAAU,6CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAMd,EAAb,SACE,cAACS,EAAD,MAEF,cAAC,IAAD,CAAOK,KAAMd,EAAb,SACE,cAACW,EAAD,MAEF,cAAC,IAAD,CAAUT,GAAIF,gBCZXe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1c7af9d6.chunk.js","sourcesContent":["export const WHITE = '#FFF'\nexport const LIGHTNER_BLUE = '#8194DB'\nexport const LIGHT_BLUE = '#2B439C'\nexport const DARK_BLUE = '#15255E'\nexport const LIGHT_GRAY = '#F0F1F4'\nexport const DARK_GRAY = '#333333'\nexport const SECONDARY_GRAY = '#3A3B3F'\nexport const DETAIL_GRAY = '#BFBFBF'\n","/** @jsxRuntime classic /\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport React, { FC } from 'react'\n\nexport const ContentWrapper: FC<\n  React.ClassAttributes<HTMLDivElement> & React.HTMLAttributes<HTMLDivElement>\n> = ({ children, ...props }) => {\n  return (\n    <div\n      css={css`\n        width: 100%;\n        padding: 0 235px;\n      `}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n","import { ApolloClient, InMemoryCache } from '@apollo/client'\n\nexport const client = new ApolloClient({\n  uri: 'https://swop.cx/graphql',\n  cache: new InMemoryCache(),\n  headers: {\n    authorization:\n      'ApiKey c88515ce40b5c857fbb6054c4176dd7de5632f7145e011d6abb267be5bcefa7a',\n  },\n})\n","export const ROUTES = {\n  CURRENCY_CONVERTER: '/currency-converter',\n  EXCHANGE_RATES: '/exchange-rates',\n}\n","/** @jsxRuntime classic /\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport React, { FC } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\n\nimport { DARK_BLUE, LIGHTNER_BLUE, WHITE } from '../constants/colors'\n\ninterface NavigationItemProp {\n  to: string\n}\nexport const NavigationItem: FC<NavigationItemProp> = ({ to, children }) => {\n  const isActive = useLocation().pathname === to\n\n  return (\n    <Link\n      css={css`\n        display: flex;\n        align-items: center;\n        font-size: 16px;\n        line-height: 19px;\n        text-transform: uppercase;\n        letter-spacing: 0.08em;\n        padding: 22px 48px;\n        transition: all 300ms ease-out;\n        text-decoration: none;\n\n        ${isActive\n          ? `\n            font-weight: 900;\n            color: ${WHITE};\n            background-color: ${DARK_BLUE};\n          `\n          : `\n            font-weight: 500;\n            color: ${LIGHTNER_BLUE};\n            background-color: transparent;\n          `};\n      `}\n      to={to}\n    >\n      {children}\n    </Link>\n  )\n}\n","/** @jsxRuntime classic /\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport React, { FC } from 'react'\n\nimport { LIGHT_BLUE } from '../constants/colors'\nimport { ROUTES } from '../constants/routes'\nimport { ContentWrapper } from './ContentWrapper'\nimport { NavigationItem } from './NavigationItem'\n\nexport const NavigationBar: FC = () => {\n  return (\n    <nav\n      css={css`\n        display: flex;\n        width: 100%;\n        height: 62px;\n        background-color: ${LIGHT_BLUE};\n\n        font-size: 16px;\n        text-transform: uppercase;\n      `}\n    >\n      <ContentWrapper\n        css={css`\n          display: flex;\n        `}\n      >\n        <NavigationItem to={ROUTES.CURRENCY_CONVERTER}>\n          Currency converter\n        </NavigationItem>\n        <NavigationItem to={ROUTES.EXCHANGE_RATES}>\n          Current exchange rates\n        </NavigationItem>\n      </ContentWrapper>\n    </nav>\n  )\n}\n","import { Global, css } from '@emotion/react'\nimport React, { FC } from 'react'\n\nexport const RootStyles: FC = () => (\n  <Global\n    styles={css`\n      body {\n        font-family: 'Roboto', sans-serif;\n        margin: 0;\n      }\n\n      /* custom scrollbar */\n      ::-webkit-scrollbar {\n        width: 11px;\n      }\n\n      ::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      ::-webkit-scrollbar-thumb {\n        background-color: #cbcbcb;\n        border-radius: 20px;\n        border: 2px solid transparent;\n        background-clip: content-box;\n      }\n\n      ::-webkit-scrollbar-thumb:hover {\n        background-color: #a7a7a7;\n      }\n    `}\n  />\n)\n","import { ApolloProvider } from '@apollo/client'\nimport React, { lazy, Suspense } from 'react'\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport { client } from './apollo/client'\nimport { NavigationBar } from './components/NavigationBar'\nimport { ROUTES } from './constants/routes'\nimport { RootStyles } from './RootStyles'\n\nconst CurrencyConverter = lazy(() => import('./pages/CurrencyConverter'))\nconst ExchangeRates = lazy(() => import('./pages/ExchangeRates'))\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <RootStyles />\n      <BrowserRouter>\n        <NavigationBar />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route path={ROUTES.CURRENCY_CONVERTER}>\n              <CurrencyConverter />\n            </Route>\n            <Route path={ROUTES.EXCHANGE_RATES}>\n              <ExchangeRates />\n            </Route>\n            <Redirect to={ROUTES.CURRENCY_CONVERTER} />\n          </Switch>\n        </Suspense>\n      </BrowserRouter>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}